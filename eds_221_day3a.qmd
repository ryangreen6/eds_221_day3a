---
title: "eds_221_day3a"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
pinyon_pine <- 14
lodgepole_pine <- 46

## some logical expressions

pinyon_pine==10 #false
pinyon_pine<lodgepole_pine #true

pinyon_pine<!lodgepole_pine #false

```

# conditionals

```{r}
burrito<-2.4

# write a short 'if' statement

if (burrito>2) {print("nice")}
```

```{r}
# try it an 'if-else' statement
pika<-89.1

if(pika>60){print("mega pika")} else(print("normal pika"))
```

```{r}
# now try an 'if-else if-else' statement. alter marmot size below to get different outputs depending on marmot size

marmot<-1

if(marmot<0.5){print("a small marmot")} else if(marmot>=0.5&marmot<3){print("a medium marmot")} else print("a large marmot")
```

```{r}
# playing with strings

library(stringr)

my_ships <- c("Millenium Falcon",
              "X-Wing",
              "Tie-Fighter",
              "Death Star")

str_detect(my_ships, pattern="r") # detecting which have the letter 'R'

```


```{r}
phrase <- "I love burritos"

if(str_detect(phrase,"love")){print("burrito fan")}

```

```{r}
# switch statements. change species to "cat", "mouse", or "dog" to get different outputs

species<-"mouse"

switch(species, "cat" = print("meow"),
       "dog" = print("woof"),
       "mouse" = print("squeak"))

if(species == "mouse") print("squeak") else if(species == "dog") print("woof") else if(species == "cat") print("meow")
```

```{r}
# working with 'for loops'

dog_names <- c("Teddy", "Khora", "Waffle", "Banjo")

for (i in dog_names) print(paste0("My dog's name is ", i, "."))
```

```{r}
# another for loop example

mass <- seq(from=0, to=3, by=0.5)
mass_1 <- mass[1]

for (i in mass) {new_value <- i+2 
print (new_value)}
```

```{r}
# yet another for loop example
mass <- seq(from=0, to=3, by=0.5)

for(i in seq_along(mass)) {
  new_value <- mass[i] + 2
  print(new_value)
}
```

```{r}
tree_height <- c(1,2,6,10)

for (i in seq_along(tree_height)) {
  new_value <- tree_height[i]+tree_height[i+1]
  print(new_value)
}
```

```{r}
# for loops with conditionals

animal <- c("cat", "dog", "dog", "zebra", "dog")

for (i in seq_along(animal)){
  if (animal[i] == "dog") {
  print ("doggo")
} else 
  print ("this is not a dog")
}
```

```{r}
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")
age_human <- c(3,8,4,6,12,18)

for(i in seq_along(species)) {
  if(species[i]=="dog") {
  animal_age <- age_human[i]*7
} else if (species[i]=="elephant") {
  animal_age <- age_human[i]*0.88
} else if (species[i]=="goat") {
  animal_age <- age_human[i]*4.7
}
  print(animal_age)
}
```

```{r}
# storing for loop outputs
# create an empty vector for animal_ages

animal_ages <- vector(mode="numeric", length=length(species))

species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")
age_human <- c(3,8,4,6,12,18)

for(i in seq_along(species)) {
  if(species[i]=="dog") {
  animal_age <- age_human[i]*7
} else if (species[i]=="elephant") {
  animal_age <- age_human[i]*0.88
} else if (species[i]=="goat") {
  animal_age <- age_human[i]*4.7
}
  animal_ages[i] <- animal_age
}
```


```{r}
tigers <- c(29,34,82)
lions <- c(2,18,6)

big_cats <- vector(mode="numeric", length=length(tigers))

for (i in seq_along(tigers)){
  total_cats <- tigers[i]+lions[i]
  big_cats[i] <- total_cats
}
big_cats
```


##  Now moving into the afternoon...

```{r}
mean_mtcars <- vector(mode="numeric", length=ncol(mtcars))

for(i in 1:ncol(mtcars)) {
  mean_value <- mean(mtcars[[i]], na.rm=TRUE)
  mean_mtcars[i] <- mean_value
}
mean_mtcars
```

```{r}
library(palmerpenguins)

for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
  penguin_median <- median(penguins[[i]], na.rm=TRUE)
  print(penguin_median)
} else {
  print("non-numeric column")
}
}
```

```{r}
# using the apply function to save us a whole lot of time

apply(X =mtcars, MARGIN =2, FUN =mean)

#now we can get the same result from this single line as the result we got from the code chunk starting line 186. 
```

```{r}
library(tidyverse)

penguins %>%
  group_by(species) %>%
  summarize(across(where(is.numeric), mean, na.rm=TRUE))
```

```{r}
# now using the map function
library(purrr)

map(.x= mtcars, .f = mean)
map_df(.x=mtcars, .f=mean)


```














